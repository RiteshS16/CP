//===========================================CSES: Minimising Grids===================================================
/*
===================================================Question===================================================
Consider an nxn grid whose squares may have traps. It is not allowed to move to a square with a trap.
Your task is to calculate the number of paths from the upper-left square to the lower-right square. You can only move right or down.
 
Input
 
The first input line has an integer n: the size of the grid.
After this, there are n lines that describe the grid. Each line has n characters: . denotes an empty cell, and * denotes a trap.
 
Output
 
Print the number of paths modulo 10^9+7.
Constraints
 
1 <= n <= 1000
===================================================Question===================================================
*/
 
#include<bits/stdc++.h>
using namespace std;
 
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int n;
    //n->Size of the grid.
    int mod=1e9+7;
    cin>>n;
    
    //2D input vector
    vector<vector<int>> grid(n,vector<int>(n));
    for(int i=0;i<n;i++)
    for(int j=0;j<n;j++)
    {
        char ch;
        cin>>ch;
        grid[i][j]=ch;
    }
    
    //DP State => dp[i][j]: Number of valid paths from grid cell (i,j) to grid cell (n-1,n-1).
    
    //Base Cases:   Initialise dp[n-1][n-1] = 1. As you are already at (n-1,n-1). Hence, it is 1.
    
    //Transition:   if(dp[i][j]=='*') then dp[i][j] = 0 else dp[i][j] = dp[i+1][j] + dp[i][j+1];
    
    //Why this transition state?
    //We know that cell [i,j] can take values from either [i+1,j] or [i,j+1].
    
    //Final subproblem: dp[0][0]


    //Time Complexity: O(n.n)
    //Space Complexity: O(n.n)

    vector<vector<int>> dp(n,vector<int>(n));
    dp[n-1][n-1]=1;
    if(grid[n-1][n-1]=='*')
    cout<<0<<endl;
    else
    {
        for(int i=n-1;i>=0;i--)
        {
            for(int j=n-1;j>=0;j--)
            {
                if(i==n-1 && j==n-1)
                continue;
                if(grid[i][j]=='*')
                {
                    dp[i][j]=0;
                    continue;
                }
                if(i==n-1)
                dp[i][j]=dp[i][j+1];
                else if(j==n-1)
                dp[i][j]=dp[i+1][j];
                else
                dp[i][j]=(dp[i+1][j]+dp[i][j+1])%mod;
            }
        }
        cout<<dp[0][0]<<endl;
    }
    
    return 0;
