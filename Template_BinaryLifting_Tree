#include<bits/stdc++.h>
using namespace std;

void dfs(vector<vector<int>> &par,int node, int parent,vector<vector<int>> &binaryLifting)
{
    binaryLifting[node][0]=parent;

    for(int i=1;i<20;i++)
    {
        binaryLifting[node][i]=binaryLifting[binaryLifting[node][i-1]][i-1];
    }
    // auto xx=binaryLifting;
    for(int i=0;i<par[node].size();i++)
    {
        if(node!=parent)
        dfs(par,par[node][i],node,binaryLifting);
    }
    return;
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int n,q;
    cin>>n>>q;
    vector<vector<int>> par(n+1);
    for(int i=2;i<=n;i++)
    {
        int e;
        cin>>e;
        par[e].push_back(i);
    }
    vector<vector<int>> binaryLifting(n+1,vector<int>(20,0));
    dfs(par,1,0,binaryLifting);
    for (int i=1;i<=q;i++)
    {
        int x,k;
        cin>>x>>k;
        for(int i=0;i<20;i++)
        {
            if((k>>i)&1) x=binaryLifting[x][i];
        }
        
        cout<< ((x==0) ? -1 : x )<<endl;
    }
    return 0;
}
