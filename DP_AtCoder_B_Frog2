/*
Problem: Frog-2
There are N stones, numbered 1,2,…,N. For each i (1≤i≤N), the height of Stone i is h_i.
There is a frog who is initially on Stone 1. He will repeat the following action some number of 
times to reach Stone N:
If the frog is currently on Stone i, jump to one of the following: 
Stone i+1,i+2,…,i+K. Here, a cost of ∣h_i−h_j| is incurred, where j is the stone to land on.
Find the minimum possible total cost incurred before the frog reaches Stone 
N.

Intution:
#   Frog can jump from ith pos to i+1, i+2.... i+k and cost to reach i+1 is abs(h_i-h_(i+1))...cost to
reach i+k is abs(h_i-h_k); Answer is min of all of these values.
#   State: dp[i]: minimum cost required to reach i from n.
    Transition: d[i]=min(dp[i],abs(h_i-h_(j))+dp[j]) for j=i+1 to i+k
    Base Case; dp[n-1]=0;
    Final Subproblem: dp[0];
*/
#include<bits/stdc++.h>
using namespace std;

int recurse(vector<int>& h, vector<int>&dp, int pos,int k)
{
    int n=h.size();
    if(pos>=n-1)
    return 0;
    
    if(dp[pos]!=-1)
    return dp[pos];
    int ans=1e9;
    for(int i=1;i<=k;i++)
    ans=min(ans,(pos+i<n ? (abs(h[pos]-h[pos+i])+recurse(h,dp,pos+i,k)) : 1000000000));
    return dp[pos] = ans;
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int mod=1e9+7;
    int n,k;
    cin>>n>>k;
    vector<int> h(n);
    for(int i=0;i<n;i++)
    cin>>h[i];
    //========================================ITERATIVE CODE========================================
    // vector<int> dp(n,1e9);
    // dp[n-1]=0;
    // dp[n-2]=abs(h[n-2]-h[n-1]);
    // for(int i=n-3;i>=0;i--)
    // {
    //     for(int j=i+1;j<min(n,i+k+1);j++)
    //     {
    //         dp[i]=min(dp[i],abs(h[i]-h[j])+dp[j]);
    //     }
    // }
    // cout<<dp[0]<<endl;
    //========================================Recursive Code========================================
    vector<int> dp(n,-1);
    int pos=0;
    int ans=recurse(h,dp,pos,k);
    cout<<ans<<endl;
    return 0;
}
