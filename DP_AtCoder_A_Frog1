/*
Problem: Frog-1
There are N stones, numbered 1,2,…,N. For each i (1≤i≤N), the height of Stone i is h_i.
There is a frog who is initially on Stone 1. He will repeat the following action some number 
of times to reach Stone N
If the frog is currently on Stone i, jump to Stone i+1 or Stone i+2. Here, a cost of abs(h_i−h_j)
is incurred, where j is the stone to land on.Find the minimum possible total cost incurred before 
the frog reaches Stone N.

Intution:
#   Frog can jump from ith pos to i+1 or i+2, and cost to reach i+1 is abs(h_i-h_(i+1)) and cost to
reach i+2 is abs(h_i-h_(i+2)); Answer is min of these two values.
#   State: dp[i]: minimum cost required to reach i from n.
    Transition: d[i]=min(abs(h_i-h_(i+1))+dp[i+1],abs(h_i-h_(i+2))+dp[i+2])
    Base Case; dp[n-1]=0, dp[n-2]=abs(h[n-2]-h[n-1]);
    Final Subproblem: dp[0];
*/
#include<bits/stdc++.h>
using namespace std;

int recurse(vector<int>& h, vector<int>&dp, int pos)
{
    int n=h.size();
    if(pos>=n-1)
    return 0;
    
    if(dp[pos]!=-1)
    return dp[pos];
    int num=1e9;
    return dp[pos] = min(abs(h[pos]-h[pos+1])+recurse(h,dp,pos+1),((pos+2<n)?(abs(h[pos]-h[pos+2])+recurse(h,dp,pos+2)):num));
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int mod=1e9+7;
    int n;
    cin>>n;
    vector<int> h(n);
    for(int i=0;i<n;i++)
    cin>>h[i];
    //================================================Iterative Code================================================
    // vector<int> dp(n);
    // dp[n-1]=0;
    // dp[n-2]=abs(h[n-2]-h[n-1]);
    // for(int i=n-3;i>=0;i--)
    // dp[i]=min(abs(h[i]-h[i+1])+dp[i+1],abs(h[i]-h[i+2])+dp[i+2]);
    // cout<<dp[0]<<endl;
    //================================================Recursive Code================================================
    vector<int> dp(n,-1);
    int pos=0;
    int ans=recurse(h,dp,pos);
    cout<<ans<<endl;
    return 0;
}
