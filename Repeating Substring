//Repeating Substring CSES Question Solution.
//Trick is that map/set were giving TLE. Hence, I converted two hash values into one unique third hash and then used unordered_set. 
#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;
using namespace std;
 
// template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
// long long int ans=0;
// bool checker(vector<long long >& all_elev,vector<long long >& all_stairs, long long x1,long long y1,long long x2,long long y2,long long mid,long long int v)
// {
//     if(x1==x2)
//         return abs(y2-y1)<=mid;
//     if(all_elev.size()==0)
//     {
//         int idxS=lower_bound(all_stairs.begin(),all_stairs.end(),y1)-all_stairs.begin();
//         if(idxS==all_stairs.size())
//         idxS--;
//         long long int t1=abs(y1-all_stairs[idxS])+abs(y2-all_stairs[idxS])+abs(x2-x1);
//         if(idxS!=0)
//         t1=min(t1,abs(y1-all_stairs[idxS-1])+abs(y2-all_stairs[idxS-1])+abs(x2-x1));
//         return t1<=mid;
//     }
//     else if(all_stairs.size()==0)
//     {
//         int idxE=lower_bound(all_elev.begin(),all_elev.end(),y1)-all_elev.begin();
//         if(idxE==all_elev.size())
//         idxE--;
//         long long int t2=abs(y1-all_elev[idxE])+abs(y2-all_elev[idxE])+(abs(x2-x1)/v + ((abs(x2-x1)%v==0)?0:1));
//         if(idxE!=0)
//         t2=min(t2,abs(y1-all_elev[idxE-1])+abs(y2-all_elev[idxE-1])+(abs(x2-x1)/v + ((abs(x2-x1)%v==0)?0:1)));
//         return t2<=mid;
//     }
//     else
//     {
//         int idxS=lower_bound(all_stairs.begin(),all_stairs.end(),y1)-all_stairs.begin();
//         if(idxS==all_stairs.size())
//         idxS--;
//         long long int t1=abs(y1-all_stairs[idxS])+abs(y2-all_stairs[idxS])+abs(x2-x1);
//         if(idxS!=0)
//         t1=min(t1,abs(y1-all_stairs[idxS-1])+abs(y2-all_stairs[idxS-1])+abs(x2-x1));
        
//         int idxE=lower_bound(all_elev.begin(),all_elev.end(),y1)-all_elev.begin();
//         if(idxE==all_elev.size())
//         idxE--;
//         long long int t2=abs(y1-all_elev[idxE])+abs(y2-all_elev[idxE])+(abs(x2-x1)/v + ((abs(x2-x1)%v==0)?0:1));
//         if(idxE!=0)
//         t2=min(t2,abs(y1-all_elev[idxE-1])+abs(y2-all_elev[idxE-1])+(abs(x2-x1)/v + ((abs(x2-x1)%v==0)?0:1)));
//         return ((t1<=mid) || (t2<=mid));
        
//     }
// }
// void makePair(set<pair<int,int>>&v,int n1,int n2, vector<int>&visited  )
// {
 
//     if(v.find({n1,n2})!=v.end() || v.find({n2,n1})!=v.end())
//     return;
    
//     cout<<"? "<<n1<<" "<<n2<<endl;
//     int n3;
//     cin>>n3;
//     if(n1==n3||n2==n3)
//     {
//         v.insert({n1,n2});
//          visited[n1]=1;
//          visited[n2]=1;
 
//         return;
//     }
 
//     if(visited[n1]==1 && visited[n3]==1)
//     makePair(v,n3,n2, visited);
//     else
//     makePair(v,n1,n3, visited),
//     makePair(v,n3,n2, visited);
// }
// long long int calPow(long long int num,long long int power)
// {
//     long long int mod=1e9+7;
//     if(power==0)
//     return 1;
    
//     if(power%2==0)
//     {
//         long long int temp=calPow(num,power/2);
//         return (1LL*temp*temp)%mod;
//     }
//     else
//     {
//         long long int temp=calPow(num,(power-1)/2);
//         return (((1LL*num*temp)%mod)*temp)%mod;
//     }
// }
// void seive(vector<long long int>& v)
// {
//     //vector<int> v=x;
//     vector<bool> isPrime(v.size(),true);
    
//     for(long long int i=2;i<v.size();i++)
//     {
//         if(isPrime[i])
//         {
//             v[i]=i;
//             for(long long int j=i*i;j<v.size();j+=i)
//             {
//                 isPrime[j]=false;
//                 v[j]=min(v[j],i);
//             }
//         }
//     }
// }
// // bool sortbyCond(const pair<int, int>& a,
// //                 const pair<int, int>& b)
// // {
// //     if (a.first != b.first)
// //         return (a.first < b.first);
// //     else
// //       return (a.second > b.second);
// // }
// // vector<vector<int>> dp(1002,vector<int>(6,-1));
// int dp[1002][6];
// int calcScore(vector<string> & s,int pos,vector<char>& tofind,int posToFind,int n,int m)
// {
//     if(pos==n)
//     return (-posToFind);
//     if(dp[pos][posToFind]!=-1)
//     return dp[pos][posToFind];
//     //string sss=ss;
//     int tempPosToFind=posToFind;
//     int take=0;
//     for(int i=0;i<s[pos].length();i++)
//     {
//         if(s[pos][i]==tofind[posToFind])
//         {
//             if(tofind[posToFind]=='k')
//             take+=5;
            
//             posToFind++;
//             posToFind%=5;
//         }
//         else
//         {
//             if(s[pos][i]=='n' || s[pos][i]=='a' || s[pos][i]=='r' || s[pos][i]=='e' || s[pos][i]=='k')
//             take--;
//         }
//     }
//     int ans1=calcScore(s,pos+1,tofind,posToFind,n,m);
//     int ans2=calcScore(s,pos+1,tofind,tempPosToFind,n,m);
    
//     return dp[pos][tempPosToFind]=max(ans1+take,ans2);
    
// }
// void factorial(vector<long long int>& fact)
// {
//     int mod=1e9+7;
//     fact[0]=1;fact[1]=1;
//     for(int i=2;i<fact.size();i++)
//     {
//         fact[i]=fact[i-1]*i;
//         fact[i]%=mod;
//     }
//     return;
// }
long long int calPow(long long int x, long long int pw)
{
    int mod=1e9+7;
    int xx=pw;
    long long int res=1;
    while(pw>0)
    {
        if(pw%2==1)
        {
            res*=x;
            res%=mod;
        }
        x*=x;
        x%=mod;
        pw/=2;
    }
    return res;
}
// void inverseFactirial(vector<long long int>& invfact,vector<long long int>& fact)
// {
//     int mod=1e9+7;
//     int n=1e6+1;
//     long long int invFact_n=calPow(fact[n],mod-2);
//     invfact[n]=invFact_n;
//     for(int i=n-1;i>=0;i--)
//     invfact[i]=(((i+1)%mod)*(invfact[i+1]%mod))%mod;
//     return;
// }
 
//base=29,31,prime=1e9+7,1e9+19;
struct StringHash{
    const long long int base1=29;
    const long long int base2=31;
    const long long int prime1=1e9+7;
    const long long int prime2=1e9+19;
    vector<long long int>v1,v2,pw1,pw2;
    StringHash(string s)
    {
        string ss=s;
        int n=s.length();
        v1.resize(n);
        v2.resize(n);
        pw1.resize(n);
        pw2.resize(n);
        for(int i=0;i<n;i++)
        {
            if(i==0)
            {
                v1[i]=s[i]-'a'+1;
                pw1[i]=1;
                v2[i]=s[i]-'a'+1;
                pw2[i]=1;
                continue;
            }
            v1[i] = (v1[i-1]*base1 + s[i]-'a'+1)%prime1;
            pw1[i]=pw1[i-1]*base1;
            pw1[i]%=prime1;
            
            v2[i] = (v2[i-1]*base2 + s[i]-'a'+1)%prime2;
            pw2[i]=pw2[i-1]*base2;
            pw2[i]%=prime2;
        }
    }
    
    pair<long long int,long long int> getHash(int l,int r)
    {
        long long int hashvalue1,hashvalue2;
        
        hashvalue1=(l-1>=0 ? (v1[r]-(v1[l-1]*pw1[r-l+1])%prime1+prime1)%prime1 : v1[r]);
        hashvalue2=(l-1>=0 ? (v2[r]-(v2[l-1]*pw2[r-l+1])%prime2+prime2)%prime2 : v2[r]);
        
        return {hashvalue1,hashvalue2};
    }
};
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    string s;
    cin>>s;
    StringHash H=StringHash(s);
    int n=s.length();
    int l=1,r=n;
    int idx=-1,len=-1;
    while(l<=r)
    {
        int mid=(l+r)/2;
        
        int flag=0;
        unordered_set<long long int> st;
        for(int i=0;i+mid-1<n;i++)
        {
            auto x=H.getHash(i,i+mid-1);
            auto h3=((x.first*5689) + x.second);
            //mp[x]++;
            if(st.find(h3)!=st.end())
            {
                idx=i;len=mid;
                flag=1;break;
            }
            st.insert(h3);
        }
        if(flag)
        {
            len=mid;l=mid+1;
        }
        else
        r=mid-1;
    }
    if(len==-1)
    cout<<len<<endl;
    else
    {
        string str=s.substr(idx,len);
        cout<<str<<endl;
    }
    
    
    return 0;
}
