#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;
using namespace std;
/*=============================================DP with BITMASKING===========================================
There are N men and N women, both numbered 1,2,…,N.
For each i,j (1≤i,j≤N), the compatibility of Man i and Woman j is given as an integer 
ai,j. If a i,j=1, Man i and Woman j are compatible; if a i,j=0, they are not.
Taro is trying to make N pairs, each consisting of a man and a woman who are compatible. 
Here, each man and each woman must belong to exactly one pair.

Find the number of ways in which Taro can make 
N pairs, modulo 10^9+7.
*/

/*
#   Intution:
    #   Lets forget DP and try to solve this using brute force recursion.
    #   To do that we need to go through every row and every column and check the following:
        #   If matrix[row][col]==1 or not;
        #   If matrix[row][col] is equal to 1 then we need to check if this row or col has not  
            appeared till now in the entire path.
        #   So we basically need to take a data structure which will keep track of all the rows and
            columns that have been taken till now. Lets take a set Data Structure for that.
        #   The pseudo code will look like:
            int recurse(vector<vector<int>> matrix,int r,set<int> man,set<int> woman)
            {
                //we have reached end of our rows and have found a way of making N pairs.
                if(r==matrix.size())
                return 1;
                
                int ans=0;
                int col=matrix.size();
                // for every Row 'r' we are iterating through all of its columns
                for(int i=0;i<col;i++)
                {
                    if(matrix[r][i]==1)
                    {
                        if(man.find(r)==man.end() && woman.find(i)==woman.end())
                        {
                            man.insert(r);woman.insert(i);
                            //moving to the next row and repeating the same procedure
                            ans+=recurse(matrix,r+1,man,woman);
                            man.erase(r);woman.erase(i);
                        }
                    }
                }
            }
        #   Now this is a good recursive solution. But will give TLE if not done using DP.
        #   To apply DP we need to check what all parameters are changing. Folloing parameters are changing:
            #   Row r.
            #   set<int> man.
            #   set<int> woman.
        #   So, if we have to use DP then some (DS)data structure of type map<pair<r,pair<set<>,set<>>> mp
            needs to be used to keep track of pre calculated values.
        #   Look carefully at the above DS, it will for sure give TLE.
        #   Optimisation of dp:
            #   Observe that instead of using a set, we can use a vector as N has a mx value of 21 to our
                vector will have no more than 21 elements. So the new DS will look like:
                map<pair<r,pair<vector<>,vector<>>>> mp. If jth col has been taken then we can set jth bit
                of the vector v[j]=1 and rest all will remain 0. 
            #   The above DS will still give us TLE.
            #   BITMASKING: To save us from TLE we will use the concept of bitmasking.
                #   Observe that the vector that we have formed above can be used to create a binary
                representation of a number. For example, if N=6 then our vector initially will look
                like v=[0,0,0,0,0,0]. lets suppose 2nd bit was set after some iterations, then V will
                look like v=[0,0,0,0,1,0]. Now, suppose 4th bit was set after some iteration, then V will
                look like v=[0,0,1,0,1,0].
            #   If we considet v as binary representation of a number then the number will be = 10.
                So, lets call this number as mask. So our mask after certain iterations is 10.
            #   Now I want to check if 3rd bit has been set in past, I will simply check if(mast&(1<<3)==0). 
            If yes, then 3rd bit is not set else it is set. If the bit is not set then it means that value can be
            included.
            #   So, we can now pass the mask, instead of passing the vector v in the recursive function. As 
            the maximum value N can take is 21, so at max the mask will have value = pow(2,21) which is well
            within the range.
            #   So our parameters which are changing now are:
                #   Row r.
                #   Mask.
            #   So, we can not create a DP solution like 
                dp[r][mask]= Number of successful pairs when I am on ith man and I have successfully paired mask women.
            #   Recursive code given below.
            

*/
int recurse(vector<vector<int>> &mat,int row,int mask,vector<vector<int>> &dp)
{
    int mod=1e9+7;
    if(row==mat.size())
    return 1;
    
    if(dp[row][mask]!=-1)
    return dp[row][mask];
    
    
    int col=mat.size();
    int ans=0;
    for(int i=0;i<col;i++)
    {
        // auto dpp=dp;
        // int r=row,c=i;
        if(mat[row][i]==1)
        {
            if((mask & (1<<i))==0)
            {
                ans += (recurse(mat,row+1,mask|(1<<i),dp));
                ans%=mod;
                mask^(1<<i);
            }
        }
    }
    ans%=mod;
    return dp[row][mask]=ans;
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int n;
    cin>>n;
    vector<vector<int>> mat(n,vector<int>(n,0));
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
            cin>>mat[i][j];
    
    
    vector<vector<int>> dp(n+1,vector<int>(pow(2,n)+1,-1));
    int ans=recurse(mat,0,0,dp);
    cout<<ans<<endl;
    return 0;
}
