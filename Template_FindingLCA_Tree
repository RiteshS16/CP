#include<bits/stdc++.h>
using namespace std;

void dfs(vector<vector<int>> &par,int node, int parent,vector<vector<int>> &binaryLifting,vector<int> &depth)
{
    binaryLifting[node][0]=parent;
    depth[node]=depth[parent]+1;
    for(int i=1;i<20;i++)
    {
        binaryLifting[node][i]=binaryLifting[binaryLifting[node][i-1]][i-1];
    }
    // auto xx=binaryLifting;
    for(int i=0;i<par[node].size();i++)
    {
        if(node!=parent)
        dfs(par,par[node][i],node,binaryLifting,depth);
    }
    return;
}
int LCA(int u,int v,vector<vector<int>> &binaryLifting,vector<int>& depth)
{
    if(depth[u]<depth[v])
    swap(u,v);
    
    int diff=depth[u]-depth[v];
    
    //bringing u at the same level of v;
    for(int i=0;i<20;i++)
    if((diff>>i)&1) u=binaryLifting[u][i];
    
    if(u==v)
    return u;
    
    //Starting from root, going downwards checking if par[u][i]!=par[v][i]
    for(int i=19;i>=0;i--)
    {
        if(binaryLifting[u][i]!=binaryLifting[v][i])
        {
            u=binaryLifting[u][i];
            v=binaryLifting[v][i];
        }
    }
    return binaryLifting[u][0];
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int n,q;
    cin>>n>>q;
    vector<vector<int>> par(n+1);
    for(int i=2;i<=n;i++)
    {
        int e;
        cin>>e;
        par[e].push_back(i);
    }
    vector<int> depth(n+1,0);
    vector<vector<int>> binaryLifting(n+1,vector<int>(20,0));
    dfs(par,1,0,binaryLifting,depth);
    for(int i=1;i<=q;i++)
    {
        int u,v;
        cin>>u>>v;
        
        int lca=LCA(u,v,binaryLifting,depth);
        cout<<lca<<endl;
    }
    
    return 0;
}
