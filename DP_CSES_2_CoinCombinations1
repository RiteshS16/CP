//===========================================CSES: Coin Combinations I===================================================
/*
===================================================Question===================================================
Consider a money system consisting of n coins. Each coin has a positive integer value. Your task is to calculate the number of distinct ways you can produce a money sum x using the available coins.
For example, if the coins are {2,3,5} and the desired sum is 9, there are 8 ways:

2+2+5
2+5+2
5+2+2
3+3+3
2+2+2+3
2+2+3+2
2+3+2+2
3+2+2+2
===================================================Question===================================================
*/
#include<bits/stdc++.h>
using namespace std;

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int n,x;
    int mod=1e9+7;
    //n->Number of Coins.
    //x->Sum to be obtained.
    cin>>n>>x;
    
    //Vector c stores all the n coins
    vector<int> c(n);
    for(int i=0;i<n;i++)
    cin>>c[i];
    
    //DP State => dp[i]: Number of different ways in which the number i can be obtained using n coins.
    
    //Base Cases:   Initialise dp[i] = 1 for all i from 1 to x where i==c[i] as these coins are already present.
    
    //Transition:   dp[i]+=dp[i-c[j]] for j=0 to n-1 if i-c[j]>=0 ;
    
    //Why this transition state?
    //We know that the possible numbers from where number i can be obtained are i-c[j].
    //Hence a number i can be reached from: Number i-c[0]
    //                                      Number i-c[1]
    //                                      Number i-c[2] and so on until i-c[j]
    //And number of ways to form number i is=Number of ways to form number (i-c[0])
    //                                                      +
    //                                       Number of ways to form number (i-c[1])
    //                                                      +
    //                                       Number of ways to form number (i-c[2])   
    //                                                      +
    //                                                      .
    //                                                      .
    //                                                      .
    //                                                      +
    //                                       Number of ways to form number (i-c[j])   
    
    //Final subproblem: dp[x]
    
    vector<int> dp(x+1,0);
    for(int i=0;i<n;i++)
    {
        if(c[i]<=x)
        dp[c[i]]++;
    }
    for(int i=1;i<=x;i++)
    {
        for(int j=0;j<n;j++)
        {
            if(i-c[j]>=0)
            dp[i]+=dp[i-c[j]];
            dp[i]%=mod;
        }
    }
    
    cout<<dp[x]<<endl;
    return 0;
}
