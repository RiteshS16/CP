/*
Problem: Longest Path
There is a directed graph G with N vertices and M edges. The vertices are numbered 1,2,…,N, and for each 
i (1≤i≤M), the i-th directed edge goes from Vertex x_i to y_i. 
G does not contain directed cycles.

Find the length of the longest directed path in 
G. Here, the length of a directed path is the number of edges in it.

Intution:
DP State : dp[i]-> Longest path at ith node.
I can take a vector visited, which will tell me if a node has been visited or not.
Following are the possibilities:
#   visited[i]==1, ie node i already visited in past. 
    #   When visited[i]==1, it means that node is already visited, hence dp[i] already exists
    for this node. 
    #   So, if I am going from node nd to node i, ie nd->i then dp[nd]= max(dp[nd],dp[i]+1);
#   visited[i]!=1 
    #   Node i is the last node.
        If i is last node then dp[i]=1;
    #   Node i is not the last node.
        If i is not the last node then dp[i]=max(dp[i],dfs(adj[i][j])+1);
#   So my three transitions will be:
    dp[i]=1, if i is last node.
    dp[i]=max(dp[i],dp[j]+1), if I am trying to go from i to j ans j is already visited.
    dp[i]=max(dp[i],dfs(adj[i][j])+1);
#   Final Subproblem:
    max(dp[i]) for i=1 to N.
*/
#include <iostream>
#include<vector>
#include<climits>
#include<string>
#include<utility>
#include<algorithm>
using namespace std;
int dfs(vector<vector<int>>& adj,int node,vector<int>& visited, vector<int>& dp)
{
    int nd=node;
    visited[node]=1;
    int ans=1;
    for(int i=0;i<adj[node].size();i++)
    {
        if(visited[adj[node][i]]!=1)
        {
            ans=max(ans,dfs(adj,adj[node][i],visited,dp)+1);
        }
        else
        ans=max(ans,dp[adj[node][i]]+1);
    }
    return dp[node]=ans;
}
int main()
{
    int n,m;
    cin>>n>>m;
    vector<vector<int>> adj(n+1);
    for(int i=0;i<m;i++)
    {
        int u,v;
        cin>>u>>v;
        adj[u].push_back(v);
    }
    vector<int> visited(n+1,0);
    vector<int> dp(n+1,0);
    for(int i=1;i<=n;i++)
    {
        if(visited[i]!=1)
        int x=dfs(adj,i,visited,dp);
    }
    int ans=0;
    for(int i=0;i<=n;i++)
    ans=max(ans,dp[i]);
    cout<<ans-1<<endl;
    
    return 0;
}
