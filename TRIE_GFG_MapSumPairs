#include <iostream>
#include<vector>
#include<map>
using namespace std;

struct Node{
    vector<int> children;
    int value_stored;
    Node()
    {
        children.resize(26,-1);
        value_stored=0;
    }
};
class Trie{
    vector<Node> trie_tree;
    map<string,int> mp;
    int trie_size=0;
    public:
    Trie()
    {
        Node N=Node();
        trie_tree.push_back(N);
        trie_size++;
    }
    void add_string(string &s,int &value)
    {
        int newval=value;
        if(mp.find(s)!=mp.end())
        value=value-mp[s];
        int current_node=0;
        for(int i=0;i<s.length();i++)
        {
            int flag=0;
            int index=s[i]-'a';
            if(trie_tree[current_node].children[index]==-1)
            {
                flag=1;
                trie_tree[current_node].children[index]=trie_size;
                trie_size++;
                Node N=Node();
                trie_tree.push_back(N);
            }
            current_node=trie_tree[current_node].children[index];
            if(flag)
            trie_tree[current_node].value_stored=value;
            else
            trie_tree[current_node].value_stored+=value;
        }
        mp[s]=newval;
        
    }
    int search_string(string &s)
    { 
        int current_node=0;
        int val=0;
        for(int i=0;i<s.length();i++)
        {
            int index=s[i]-'a';
            if(trie_tree[current_node].children[index]==-1)
            return 0;
            current_node=trie_tree[current_node].children[index];
            
            val=trie_tree[current_node].value_stored;
        }
        return val;
    }
};
class MapSum {
public:
    Trie T;
    MapSum() {
        T=Trie();
    }
    
    void insert(string key, int val) {
        T.add_string(key,val);
    }
    
    int sum(string prefix) {
        int value = T.search_string(prefix);
        
        return value;
    }
};

int main()
{
    MapSum ms;
    ms.insert("apple",3);
    ms.insert("apple",5);
    ms.insert("apple",1);
    cout<<ms.sum("apple");

    return 0;
}
