/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include<iostream>
#include<vector>
#include<math.h>
#include<utility>
#include<algorithm>
#include<climits>
using namespace std;
struct Node{
    vector<int> children;
    Node()
    {
        children.resize(2,-1);    
    }
    
};
class Trie{
    vector<Node> trie_tree;
    int trie_size=0;
    public:
    Trie()
    {
        Node N=Node();
        trie_tree.push_back(N);
        trie_size++;
    }
    void add_string(string&s)
    {
        int current_node=0;
        for(int i=0;i<s.length();i++)
        {
            if(trie_tree[current_node].children[s[i]-'0']==-1)
            {
                trie_tree[current_node].children[s[i]-'0']=trie_size;
                Node N=Node();
                trie_tree.push_back(N);
                trie_size++;
            }
            current_node=trie_tree[current_node].children[s[i]-'0'];
        }
    }
    string maxNumber(string &s)
    {
        string ans="";
        int current_node=0;
        for(int i=0;i<s.length();i++)
        {
            if(s[i]=='0')
            {
                if(trie_tree[current_node].children[1]!=-1)
                {
                    ans+='1';
                    current_node=trie_tree[current_node].children[1];
                }
                else
                {
                    ans+='0';
                    current_node=trie_tree[current_node].children[0];
                }
            }
            else
            {
                if(trie_tree[current_node].children[0]!=-1)
                {
                    ans+='1';
                    current_node=trie_tree[current_node].children[0];
                }
                else
                {
                    ans+='0';
                    current_node=trie_tree[current_node].children[1];
                }
            }
        }
        return ans;

    }
};
int stringToInt(string &s)
{
    int val=0;
    for(int j=0;j<s.length();j++)
    {
        val+=pow(2,31-j)*(s[j]-'0');
    }
    return val;
}
string intToString(int n)
{
    string str="";
    for(int i=31;i>=0;i--)
    str+=(((n&(1<<i))&&1)+'0');
    return str;
}
class Solution {
public:
    int findMaximumXOR(vector<int>& nums) {
        Trie T=Trie();
        vector<string> numbers;
        for(int i=0;i<nums.size();i++)
        {
            numbers.push_back(intToString(nums[i]));
            T.add_string(numbers.back());
        }
        int ans=INT_MIN;
        for(int i=0;i<numbers.size();i++)
        {
            string str=T.maxNumber(numbers[i]);
            int val=stringToInt(str);
            ans=max(ans,val);
        }
        return ans;
    }
};
int main()
{
    Solution S;
    vector<int> nums={3,10,5,25,2,8};
    S.findMaximumXOR(nums);
    return 0;
}
