/* 
Problem : Grid1
There is a grid with H horizontal rows and W vertical columns. Let (i,j) denote the square at the 
i-th row from the top and the j-th column from the left.For each i and j (1≤i≤H, 1≤j≤W), Square 
(i,j) is described by a character a[i][j]. If a[i][j] is '.', Square (i,j) is an empty square; if 
a[i][j] is '#', Square (i,j) is a wall square. It is guaranteed that Squares (1,1) and 
(H,W) are empty squares.

Taro will start from Square (1,1) and reach (H,W) by repeatedly moving right or down to an 
adjacent empty square.

Find the number of Taro's paths from Square (1,1) to (H,W). As the answer can be extremely large, 
find the count modulo (1e9+7).

Intuition:
While moving from [h,w] to [0,0], I can either move up to h-1 or to right w-1. 
So, I can reach cell [i,j] from either [i+1,j] or [i,j+1];
So, Number of ways to reach a[i][j] from a[h][w] is=a[i+1][j]+a[i][j+1];
DP State= dp[i][j]=> Number of ways to reach cell i,j from cells h,w;
DP Transition   dp[i][j]=dp[i+1][j]+dp[i][j+1], if a[i][j]=='.'
                dp[i][j]=0 if a[i][j]=='#'
*/
#include<iostream>
#include<vector>
#include<climits>
#include<string>
#include<utility>
#include<algorithm>
using namespace std;
int recurse(vector<string>& mat,int row,int col,vector<vector<int>>&dp)
{
    int mod=1e9+7;
    int n=mat.size();
    int m=mat[0].size();
    if(row==n-1 && col==m-1)
    return 1;
    if(row==n || col==m)
    return 0;
    if(mat[row][col]=='#')
    return 0;
    if(dp[row][col]!=-1)
    return dp[row][col];
    
    int ans=0;
    ans=recurse(mat,row+1,col,dp)+recurse(mat,row,col+1,dp);
    ans%=mod;
    return dp[row][col]=ans;
}
int main()
{
    int h,w;
    cin>>h>>w;
    vector<string> mat;
    for(int i=0;i<h;i++)
    {
        string s;
        cin>>s;
        mat.push_back(s);
    }
    int mod=1e9+7;
    //==========================================Recursive Code========================================
    // vector<vector<int>> dp(h+1,vector<int>(w+1,-1));
    // int ans=recurse(mat,0,0,dp);
    // cout<<ans<<endl;
    //==========================================Iterative Code========================================
    vector<vector<int>> dp(h+2,vector<int>(w+2,0));
    dp[h][w]=1;
    for(int i=h;i>=1;i--)
    {
        for(int j=w;j>=1;j--)
        {
            if(i==h && j==w)
            continue;
            if(mat[i-1][j-1]=='.')
            {
                dp[i][j]=dp[i+1][j]+dp[i][j+1];
                dp[i][j]%=mod;
            }
            else
            dp[i][j]=0;
        }
    }
    cout<<dp[1][1]<<endl;
    return 0;
}
