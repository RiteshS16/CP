//===========================================CSES: Edit Distance===================================================
/*
===================================================Question===================================================
The edit distance between two strings is the minimum number of operations required to transform one string into the other.
The allowed operations are:

Add one character to the string.
Remove one character from the string.
Replace one character in the string.

For example, the edit distance between LOVE and MOVIE is 2, because you can first replace L with M, and then add I.
Your task is to calculate the edit distance between two strings.

Input
The first input line has a string that contains n characters between A–Z.
The second input line has a string that contains m characters between A–Z.

Output
Print one integer: the edit distance between the strings.
===================================================Question===================================================
*/

//Time Complexity: O(m.n)
//Space Complexity: O(m.n)
#include<bits/stdc++.h>
using namespace std;

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    string str1,str2;
    cin>>str1>>str2;
    int n=str1.length();
    int m=str2.length();

    /*
    Intuition: 
    # Consider 2 string abc,adxe.
    # There can be 6 possibilities to make the last characters of both the strings same
    #   (i) Add e at the end of first string.
    #   (ii) Add c at the end of second string 
    #   (iii) Remove e from end of second string
    #   (iv) Remove c from end of first string
    #   (v) Replace c with e in first string
    #   (vi) Replace e with c in second string
    # Observe that (i) and (iii) are same, (ii) and (iv) are same (v) and (vi) are same.
    # How? 
    # Consider case (i)=>   Adding e to 1st string will give me abce. Second string is adxe.
    #                       Now, on removing e from both I will get abc and adx.
    # Consider case (iii)=>  Removin e from 2nd string will give me adx.
    #                       Now, both strings will look like abc and adx.
    # Hence, it can be seen that (i) and (iii) are same. Similarly (ii) & (iv) and (v) & (vi) are same.
    # So now our problem is divided into 3 parts
    #   (i) Remove from 2nd or add in first string and delete last characters from both
    #   (ii) Remove from 1st or add in second string and delete last characters from both
    #   (iii) Replace either of the characters between strings and delete last characters from both
    */
    
    //DP State => dp[i][j]: edit distance from i,j to n,m.
    //Transition => if(str1[i]!=str2[j] dp[i][j]=min(dp[i+1][j]+1,dp[i][j+1]+1,dp[i+1][j+1]+1) ie min((ii),(i),(iii))
    //           => else dp[i][j]=dp[i+1][j+1] 
    
    //Base Cases:   
    // When str1 is empty, I will need to add str2.length() characters in first string to make it equal to str2
    //          if str1=empty and str2=some value then dp[n][j]=len(str2) 
    // When str2 is empty, I will need to add str1.length() characters in second string to make it equal to str1
    //          if str2=empty and str1=some value then dp[i][m]=len(str2)
    // If both string are empty then we need to do nothing
    //          if str1=empty and str2=empty then dp[n][m]=0
    
    //Final subproblem: dp[0][0]
    
    vector<vector<int>> dp(n+1,vector<int>(m+1,0));
    
    //Why loop in reverse order for both i & j?
    //Observe that my present state (i,j) depends on states i+1 and j+1. 
    //Hence, I need to find i+1 and j+1 states before calculating i,j.
    for(int i=m;i>=0;i--)
    dp[n][i]=m-i;
    
    for(int i=n;i>=0;i--)
    dp[i][m]=n-i;
    
    dp[n][m]=0;
    for(int i=n-1;i>=0;i--)
    {
        for(int j=m-1;j>=0;j--)
        {
            if(str1[i]==str2[j])
            dp[i][j]=dp[i+1][j+1];
            else
            dp[i][j]=min(dp[i+1][j]+1,min(dp[i][j+1]+1,dp[i+1][j+1]+1));
        }
    }
    cout<<dp[0][0]<<endl;
    return 0;
}
