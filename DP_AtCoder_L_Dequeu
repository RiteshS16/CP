
/*
Problem: Dequeu
Taro and Jiro will play the following game against each other.

Initially, they are given a sequence 
a=(a1,a2,…,aN). Until a becomes empty, the two players perform the following operation alternately, 
starting from Taro:
Remove the element at the beginning or the end of a. The player earns x points, where x is the removed element.
Let X and Y be Taro's and Jiro's total score at the end of the game, respectively. Taro tries to maximize 
X−Y, while Jiro tries to minimize X−Y.
Assuming that the two players play optimally, find the resulting value of X−Y.
*/

/*
#   https://www.youtube.com/watch?v=PEONHX2qssY
*/
#include<bits/stdc++.h>
using namespace std;

long long recurse(vector<int>& a,vector<vector<long long>>& dp,int i,int j,long long sum)
{
    int ii=i,jj=j;
    long long summ=sum;
    if(i>j)
    return 0;
    if(dp[i][j]!=-1)
    return dp[i][j];
    int n=a.size();
    
    //ans=max(a[i]+(sum-a[i])-recurse(a,dp,i+1,j,sum-a[i]),a[j]+sum-a[j]-recurse(a,dp,i,j-1,sum-a[j]));
    //ans=max(taro choose ith element + Remaining sum left affter choosing ith element - Jiro's element,...);
    long long ans= max(sum-recurse(a,dp,i+1,j,sum-a[i]),sum-recurse(a,dp,i,j-1,sum-a[j]));
    
    return dp[i][j]=ans;
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int mod=1e9+7;
    int n;
    cin>>n;
    vector<int> a(n);
    long long sum=0;
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
        sum+=a[i];
    }
    //======================================Recursive======================================
    vector<vector<long long>> dp(n+1,vector<long long>(n+1,-1));
    long long  taro=recurse(a,dp,0,n-1,sum);
    long long jiro=sum-taro;
    cout<<taro-jiro<<endl;
    
    
    
    return 0;
}
